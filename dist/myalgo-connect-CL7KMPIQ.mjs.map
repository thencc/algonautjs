{
  "version": 3,
  "sources": ["../../algo/web3-wallet-handler/node_modules/.pnpm/@randlabs+myalgo-connect@1.4.2/node_modules/@randlabs/myalgo-connect/lib/utils/errors.js", "../../algo/web3-wallet-handler/node_modules/.pnpm/@randlabs+myalgo-connect@1.4.2/node_modules/@randlabs/myalgo-connect/lib/popup/popup.js", "../../algo/web3-wallet-handler/node_modules/.pnpm/@randlabs+myalgo-connect@1.4.2/node_modules/@randlabs/myalgo-connect/lib/utils/utils.js", "../../algo/web3-wallet-handler/node_modules/.pnpm/@randlabs+communication-bridge@1.0.1/node_modules/@randlabs/communication-bridge/lib/messenger.js", "../../algo/web3-wallet-handler/node_modules/.pnpm/@randlabs+communication-bridge@1.0.1/node_modules/@randlabs/communication-bridge/index.js", "../../algo/web3-wallet-handler/node_modules/.pnpm/@randlabs+myalgo-connect@1.4.2/node_modules/@randlabs/myalgo-connect/lib/messaging/Messaging.js", "../../algo/web3-wallet-handler/node_modules/.pnpm/@randlabs+myalgo-connect@1.4.2/node_modules/@randlabs/myalgo-connect/lib/main.js", "../../algo/web3-wallet-handler/node_modules/.pnpm/@randlabs+myalgo-connect@1.4.2/node_modules/@randlabs/myalgo-connect/index.js"],
  "sourcesContent": ["const ERRORS = {\n\tWINDOW_NOT_LOADED: \"Window not loaded\",\n\tWINDOW_IS_OPENED: \"Windows is opened\",\n\tWINDOW_NOT_OPENED: \"Can not open popup window\",\n\tINVALID_WINDOW: \"Invalid window\",\n};\n\nclass SignTxnsError extends Error {\n\tconstructor(message, code, data) {\n\t\tsuper(message);\n\t\tthis.code = code;\n\t\tthis.data = data;\n\t}\n}\n\nmodule.exports = {\n\tERRORS,\n\tSignTxnsError\n};\n", "const { WINDOW_NOT_OPENED } = require(\"../utils/errors\");\n\n/**\n * @description Popup configuration\n * @typedef {Object} PopupOptions\n * @property {string} [name]\n * @property {number} [width]\n * @property {number} [height]\n * @property {number} [top]\n * @property {number} [left]\n * @property {0|1} [status]\n * @property {0|1} [resizable]\n * @property {0|1} [toolbar]\n * @property {0|1} [menubar]\n * @property {0|1} [scrollbars]\n */\n\n/**\n * @type {PopupOptions}\n */\nconst defaultOptions = {\n\twidth: 400,\n\theight: 600,\n};\n\n/**\n * @description Open a new browser window\n * @param {string} url\n * @param {PopupOptions} options\n * @returns {Window}\n * @file Open new popup\n * @author The kraken.js team\n * @copyright This file is part of the project BelterJS which is released under Apache-2.0 License.\n * Go to https://github.com/krakenjs/belter for full license details.\n */\n\nfunction openPopup(url, options = defaultOptions) {\n\n\tlet { name = '', width, height, top = 0, left = 0 } = options;\n\n\tif (width) {\n\t\tif (window.outerWidth) {\n\t\t\tleft = Math.round((window.outerWidth - width) / 2) + window.screenX;\n\t\t}\n\t\telse if (window.screen.width) {\n\t\t\tleft = Math.round((window.screen.width - width) / 2);\n\t\t}\n\t}\n\n\tif (height) {\n\t\tif (window.outerHeight) {\n\t\t\ttop = Math.round((window.outerHeight - height) / 2) + window.screenY;\n\t\t}\n\t\telse if (window.screen.height) {\n\t\t\ttop = Math.round((window.screen.height - height) / 2);\n\t\t}\n\t}\n\n\tif (width && height) {\n\t\toptions = {\n\t\t\ttop,\n\t\t\tleft,\n\t\t\twidth,\n\t\t\theight,\n\t\t\tstatus: 1,\n\t\t\ttoolbar: 0,\n\t\t\tmenubar: 0,\n\t\t\tresizable: 1,\n\t\t\tscrollbars: 1,\n\t\t};\n\t}\n\n\t// eslint-disable-next-line array-callback-return\n\tconst params = Object.keys(options).map((key) => {\n\t\tconst param = options[key];\n\t\tif (param !== null && param !== undefined && typeof param.toString === 'function') {\n\t\t\treturn `${key}=${param.toString()}`;\n\t\t}\n\t}).filter(Boolean).join(',');\n\n\tlet win;\n\n\ttry {\n\t\twin = window.open(url, name, params);\n\t}\n\tcatch (err) {\n\t\tthrow new Error(`${WINDOW_NOT_OPENED} - ${err.stack || err.message}`);\n\t}\n\n\tif (!win || window.closed) {\n\t\tthrow new Error(`${WINDOW_NOT_OPENED} - blocked`);\n\t}\n\n\treturn win;\n}\n\nmodule.exports = {\n\topenPopup,\n};\n", "\nfunction sleep(msec = 200) {\n\treturn new Promise(resolve => setTimeout(resolve, msec));\n}\n\n/**\n * @typedef {import(\"../main\").Transaction} Transaction\n */\n\n/**\n * @typedef {import(\"../main\").EncodedTransaction} EncodedTransaction\n */\n\n/**\n * @description Preparate transactions before send it to the bridge.\n * This method changes all ArrayBuffer to base64.\n * @param {Transaction|EncodedTransaction} transaction Transaction provided by the user\n * @returns {any} Return the same input\n */\nfunction prepareTxn(transaction) {\n\n\tif (transaction.constructor === Uint8Array)\n\t\treturn Buffer.from(transaction).toString(\"base64\");\n\telse if (typeof transaction === \"string\")\n\t\treturn transaction;\n\n\tconst txn = Object.assign({}, transaction);\n\n\tif (txn.note && txn.note.constructor === Uint8Array)\n\t\ttxn.note = Buffer.from(txn.note).toString(\"base64\");\n\n\tif (txn.assetMetadataHash && txn.assetMetadataHash.constructor === Uint8Array)\n\t\ttxn.assetMetadataHash = Buffer.from(txn.assetMetadataHash).toString(\"base64\");\n\n\tif (txn.group && txn.group.constructor === Uint8Array)\n\t\ttxn.group = Buffer.from(txn.group).toString(\"base64\");\n\n\tif (txn.type === \"appl\" && txn.appApprovalProgram && txn.appApprovalProgram.constructor === Uint8Array)\n\t\ttxn.appApprovalProgram = Buffer.from(txn.appApprovalProgram).toString(\"base64\");\n\n\tif (txn.type === \"appl\" && txn.appClearProgram && txn.appClearProgram.constructor === Uint8Array)\n\t\ttxn.appClearProgram = Buffer.from(txn.appClearProgram).toString(\"base64\");\n\n\tif (txn.type === \"appl\" && txn.appArgs && txn.appArgs.length > 0)\n\t\tfor (let i = 0; i < txn.appArgs.length; i++)\n\t\t\tif (txn.appArgs[i].constructor === Uint8Array)\n\t\t\t\ttxn.appArgs[i] = Buffer.from(txn.appArgs[i]).toString(\"base64\");\n\n\treturn txn;\n}\n\nmodule.exports = {\n\tsleep,\n\tprepareTxn,\n};\n", "class Messenger {\n\n\t/**\n\t * @callback onMessage\n\t * @param {error} err\n\t * @param {Object} result\n\t */\n\n\t/**\n\t * @description Callback function to send response to the window source of the message\n\t * @callback sendResponse\n\t * @param {Object} response Message response\n\t * @returns {void}\n\t */\n\n\t/**\n\t * @description Callback function to manage message received from the channel\n     * @callback onMessageCallback\n     * @param {Object} json\n\t * @param {Window} source\n     * @param {sendResponse} cb\n\t * @param {Messenger} bridge\n\t * @returns {void}\n     */\n\n\t/**\n\t * @description Send message options\n\t * @typedef {Object} sendMessageOptions\n\t * @property {boolean} waitForReply Wait for a reply from the recipient\n\t * @property {string} origin Override Window.origin\n\t * @property {number} timeout Timeout to wait for reply message, default 4000 msec\n\t */\n\n\t/**\n     * @param {string} channelName  Channel Name\n     * @param {onMessageCallback} [onMessageCallback] Callback function\n     */\n\n\tconstructor(channelName, onMessageCallback) {\n\t\tthis.channelName = channelName;\n\t\tthis.onMessage = onMessageCallback;\n\n\t\tthis._installListener();\n\n\t\t/**\n\t\t * @access private\n\t\t * @typedef {Object.<string, onMessage>} RequestObject Request objects\n\t\t * @type {RequestObject} _requests Mapping of request ids to callbacks\n\t\t */\n\t\tthis._requests = new Map();\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {number} Next request id\n\t\t */\n\t\tthis._nextId = 0;\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {number} Time to wait for the message response\n\t\t */\n\t\tthis._defaultTimeout = 4000;\n\t}\n\n\t/**\n\t * @access private\n\t */\n\n\t_installListener() {\n\t\tconst that = this;\n\n\t\t/**\n\t\t * @access private\n\t\t * @param {Window} this\n\t\t * @param {MessageEvent} event\n\t\t */\n\n\t\tthis._listener = function (event) {\n\t\t\t// Ignore invalid messages or those after the client has closed\n\t\t\tif (!event.data || typeof event.data !== 'string') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet json;\n\n\t\t\ttry {\n\t\t\t\tjson = JSON.parse(event.data);\n\t\t\t\tif (!json.channel || json.channel !== that.channelName) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (typeof json.message !== 'object') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\t // Ignore malformed messages or not targetting us\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Add request callback\n\t\t\tif (typeof json.replyId !== 'undefined') {\n\n\t\t\t\tif (typeof json.replyId !== 'number' || (json.replyId % 1) !== 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If we have a message waiting for a reply, process it, else ignore\n\t\t\t\tconst req = that._requests.get(json.replyId);\n\t\t\t\tif (req) {\n\t\t\t\t\t// Ignore if the message comes from somewhere else\n\t\t\t\t\tif (event.origin !== req.targetOrigin) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tclearTimeout(req.timeout);\n\n\t\t\t\t\tthat._requests.delete(json.replyId);\n\n\t\t\t\t\treq.resolve(json.message);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (typeof json.id !== 'number' || (json.id % 1) !== 0 || !that.onMessage) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// We received a message\n\t\t\t\tconst channel = that.channelName;\n\t\t\t\tconst replyId = json.id;\n\t\t\t\tconst origin = event.origin;\n\n\t\t\t\tconst replyMessage = function (message) {\n\t\t\t\t\tconst request = {\n\t\t\t\t\t\tchannel,\n\t\t\t\t\t\treplyId,\n\t\t\t\t\t\tmessage: message,\n\t\t\t\t\t};\n\n\t\t\t\t\tevent.source.postMessage(\n\t\t\t\t\t\tJSON.stringify(request),\n\t\t\t\t\t\torigin\n\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\tthat.onMessage(json.message, event.origin, event.source, replyMessage, that);\n\t\t\t}\n\t\t};\n\n\t\twindow.addEventListener(\"message\", this._listener);\n\t}\n\n\t/**\n\t * @access public\n\t * @description Send a message to another window\n\t * @param {Window} targetWindow Target Window\n\t * @param {Object} message Object Message\n\t * @param {string} origin Target origin\n\t * @param {sendMessageOptions} [options] Object Message\n\t * @returns {Promise<any>} Returns\n\t */\n\tsendMessage(targetWindow, message, origin, options) {\n\t\tlet targetOrigin;\n\t\ttry {\n\t\t\ttargetOrigin = new URL(origin).origin;\n\t\t}\n\t\tcatch (e) {\n\t\t\tthrow new Error('Invalid origin URL');\n\t\t}\n\n\t\t// Prepare message\n\t\tconst request = {\n\t\t\tchannel: this.channelName,\n\t\t\tid: this.getNextId(),\n\t\t\tmessage: message,\n\t\t};\n\n\t\tif (options && options.waitForReply) {\n\t\t\tconst that = this;\n\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\t// Set a timeout if a response is not received\n\t\t\t\tconst timeout = setTimeout(function() {\n\t\t\t\t\tconst req = that._requests.get(request.id);\n\t\t\t\t\tif (req) {\n\t\t\t\t\t\tthat._requests.delete(request.id);\n\n\t\t\t\t\t\treject(new Error('Timeout expired for the message response'));\n\t\t\t\t\t}\n\t\t\t\t}, options && options.timeout ? options.timeout : that._defaultTimeout);\n\n\t\t\t\tthat._requests.set(request.id, {\n\t\t\t\t\ttimeout,\n\t\t\t\t\tresolve,\n\t\t\t\t\ttargetOrigin,\n\t\t\t\t});\n\n\t\t\t\ttargetWindow.postMessage(\n\t\t\t\t\tJSON.stringify(request),\n\t\t\t\t\ttargetOrigin\n\t\t\t\t);\n\t\t\t});\n\n\t\t}\n\t\ttargetWindow.postMessage(\n\t\t\tJSON.stringify(request),\n\t\t\ttargetOrigin\n\t\t);\n\t}\n\n\t/**\n\t * @access public\n\t * @description Close client connection\n\t */\n\n\tclose() {\n\t\twindow.removeEventListener('message', this._listener);\n\t\tthis._listener = null;\n\t\tdelete this._requests;\n\t}\n\n\t/**\n\t * @access private\n\t */\n\n\tgetNextId() {\n\t\tthis._nextId += 1;\n\t\treturn this._nextId;\n\t}\n}\n\nmodule.exports = Messenger;\n", "module.exports = require(\"./lib/messenger\");\n", "const Messenger = require(\"@randlabs/communication-bridge\");\n\nconst WALLET_BRIDGE_CHANNEL_NAME = \"wallet-bridge-communication-channel\";\n\nclass Messaging {\n\n\t/**\n\t * @description Request object\n\t * @typedef {Object} Request\n\t * @property {string} method Request method\n\t * @property {Object} [params] Optionally, request params\n\t */\n\n\t/**\n\t * @description Response object\n\t * @typedef {Object} Response\n\t * @property {\"error\"|\"success\"} status Response status\n\t * @property {string} message Response message\n\t * @property {Object} [data] Optionally, is the request was a success and sent data\n\t */\n\n\n\t/**\n\t * @description Callback function to manage message received from the channel\n     * @callback onMessagingCallback\n     * @param {Request} request Request received from another window\n     * @param {sendResponse} cb Response callback\n\t * @returns {void}\n     */\n\n\t/**\n     * @constructor Messaging constructor\n     * @param {onMessagingCallback} [listenerCallback]\n     * @description Create an abstraction of Messenger class\n     */\n\n\tconstructor(listenerCallback) {\n\t\tconst that = this;\n\n\t\t/**\n\t\t * @access public\n\t\t * @description Send message options\n\t\t * @type {import(\"bridge-communication\").sendMessageOptions}\n\t\t */\n\t\tthis.options = { waitForReply: true, timeout: 250 };\n\n\t\t/**\n\t\t * @access private\n\t\t */\n\t\tthis.listenerCallback = listenerCallback;\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {Messenger}\n\t\t */\n\t\tthis.bridge = new Messenger(WALLET_BRIDGE_CHANNEL_NAME, function(req, source, cb, bridge) {\n\t\t\tif (that.listenerCallback)\n\t\t\t\tthat.listenerCallback(req, cb);\n\t\t});\n\t}\n\n\t/**\n\t * @access public\n     * @description Send message to a target window\n     * @param {Window} window Target window\n     * @param {Request} request Request\n     * @param {string} origin Target origin\n\t * @param {import(\"bridge-communication\").sendMessageOptions} [options] Override default message options\n\t * @returns {Promise<Response>} Response of the target window\n     */\n\n\tsendMessage(window, request, origin, options) {\n\t\treturn this.bridge.sendMessage(window, request, origin, options ? options : this.options);\n\t}\n\n\t/**\n\t * @access public\n\t * @description Set new listener\n\t * @param {onMessagingCallback} [listenerCallback] Set a new listener or override actual listener\n\t * @returns {void}\n\t */\n\tsetNewListener(listenerCallback) {\n\t\tthis.listenerCallback = listenerCallback;\n\t}\n\n\t/**\n\t * @access public\n\t * @description Close bridge\n\t * @returns {void}\n\t */\n\tclose() {\n\t\tthis.bridge.close();\n\t}\n}\n\nmodule.exports = Messaging;\n", "const { openPopup } = require(\"./popup/popup\");\nconst { sleep, prepareTxn } = require(\"./utils/utils\");\nconst { Errors, SignTxnsError } = require(\"./utils/errors\");\n\nconst Messaging = require(\"./messaging/Messaging\");\n\n/**\n * @type {Messaging | null}\n */\nlet bridge = null;\n\n/**\n * @description Transaction hash\n * @typedef TxHash\n * @type {string}\n */\n\n/**\n * @description Base64 string\n * @typedef Base64\n * @type {string}\n */\n\n/**\n  * @description Options\n  * @typedef Options\n  * @type {object}\n  * @property {string} [bridgeUrl] Override wallet.myalgo.com default frame url.\n  * @property {number} [timeout] Number of msec to wait the popup response, default value: 1600000 msec.\n  * @property {boolean} [disableLedgerNano] It will disable ledger nano accounts and returns only mnemonic accounts.\n  */\n\n/**\n  * @description Sign transaction options\n  * @typedef SignTransactionOptions\n  * @type {object}\n  * @property {Address} [overrideSigner] Force transactions to be signed with the specified account instead of the from/auth address.\n  */\n\n/**\n * @description Connect method settings\n * @typedef ConnectionSettings\n * @type {object}\n * @property {boolean} [shouldSelectOneAccount] Only returns one account\n * @property {boolean} [openManager] Open account manager\n */\n\n/**\n * @description Algorand account address\n * @typedef Address\n * @type {string}\n */\n\n/**\n * @description Payment transaction object\n * @typedef PaymentTxn\n * @type {object}\n * @property {\"pay\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n */\n\n/**\n * @description Asset transfer transaction object\n * @typedef AssetTransferTxn\n * @type {object}\n * @property {\"axfer\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n * @property {number} [assetIndex] Asset index\n * @property {Address} [assetRevocationTarget] Asset revocation address\n */\n\n/**\n * @description Asset configuration transaction object\n * @typedef AssetConfigTxn\n * @type {object}\n * @property {\"acfg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [assetIndex] Asset index\n * @property {number} [assetTotal] Asset total supply\n * @property {number} [assetDecimals] Asset decimals\n * @property {boolean} [assetDefaultFrozen] Default frozen\n * @property {Address} [assetManager] Asset manager address\n * @property {Address} [assetReserve] Asset reserve address\n * @property {Address} [assetFreeze] Asset freeze address\n * @property {Address} [assetClawback] Asset clawback address\n * @property {string} [assetUnitName] Asset unit name\n * @property {string} [assetName] Asset name\n * @property {string} [assetURL] Asset url\n * @property {string} [assetMetadataHash] Asset metadata hash\n * @property {boolean} [strictEmptyAddressChecking]\n */\n\n/**\n * @description Key registration transaction object\n * @typedef KeyRegTxn\n * @type {object}\n * @property {\"keyreg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {string} [voteKey] Vote key\n * @property {string} [selectionKey] Selection key\n * @property {number} voteFirst Vote first round\n * @property {number} voteLast Vote last round\n * @property {number} [voteKeyDilution] Vote key dilution\n */\n\n/**\n * @description Application call transaction object\n * @typedef ApplicationTxn\n * @type {object}\n * @property {\"appl\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [appIndex] Application id\n * @property {0|1|2|3|4|5} [appOnComplete]\n * @property {number} [appLocalInts]\n * @property {number} [appLocalByteSlices]\n * @property {number} [appGlobalInts]\n * @property {number} [appGlobalByteSlices]\n * @property {Uint8Array|Base64} [appApprovalProgram]\n * @property {Uint8Array|Base64} [appClearProgram]\n * @property {Uint8Array[]|Base64[]} [appArgs]\n * @property {Address[]} [appAccounts]\n * @property {number[]} [appForeignApps]\n * @property {number[]} [appForeignAssets]\n */\n\n/**\n * @description Transaction Object\n * @typedef Transaction\n * @type {PaymentTxn | AssetTransferTxn | AssetConfigTxn | KeyRegTxn | ApplicationTxn}\n */\n\n/**\n * @description Base64 encoding of the canonical msgpack encoding of a SignedTxn\n * @typedef SignedTxnStr\n * @type {Base64}\n */\n\n/**\n * @description Application call transaction object\n * @typedef MultisigMetadata\n * @type {object}\n * @property {number} version Multisig version\n * @property {number} threshold Multisig threshold value\n * @property {Address[]} addrs Multisig cosigners\n */\n\n/**\n * @description ARC-0001 Transaction Object\n * @typedef WalletTransactions\n * @type {object}\n * @property {txs}\n * @property {Base64} txn Base64 encoding of the canonical msgpack encoding of a Transaction.\n * @property {Address} [authAddr] Authorized address used to sign the transaction when the account is rekeyed\n * @property {MultisigMetadata} [msig] Multisig metadata used to sign the transaction\n * @property {Address[]} [signers] Optional list of addresses that must sign the transactions\n * @property {SignedTxnStr} [stxn] Base64 encoding of the canonical msgpack encoding\n * of a SignedTxn corresponding to txn, when signers=[]\n * @property {string} [message] Optional message explaining the reason of the transaction\n * @property {string} [groupMessage] Message explaining the reason of this group of transaction.\n * Field only allowed in the first transaction of a group\n */\n\n/**\n * @description ARC-0001 Transaction Options Object\n * @typedef SignTxnsOpts\n * @type {object}\n */\n\n/**\n * @typedef EncodedTransaction\n * @type {Uint8Array|Base64} Algorand Encoded Transaction\n */\n\n/**\n * @typedef SignedTx\n * @type {object}\n * @property {TxHash} txID Transaction hash\n * @property {Uint8Array} blob Signed transaction\n */\n\nclass MyAlgoConnect {\n\n\t/**\n\t * @constructor\n\t * @param {Options} [options] Operation options\n\t */\n\tconstructor(options) {\n\n\t\tif (!bridge) {\n\t\t\tbridge = new Messaging();\n\t\t}\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {Messaging}\n\t\t */\n\t\tthis.bridge = bridge;\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {number} Popup Timeout\n\t\t */\n\t\tthis.timeout = (options && options.timeout ? options.timeout : 1600000);\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {string} Frame url\n\t\t */\n\t\tthis.url = (options && options.bridgeUrl ? options.bridgeUrl : \"https://wallet.myalgo.com/bridge\");\n\n\t\tif (this.url.endsWith(\"/\"))\n\t\t\tthis.url = this.url.slice(0, -1);\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current connect opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentConnectPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current signtx opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentSigntxPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current signlogic opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentSignLogicSigPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current tealsign opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentTealSignPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current signbytes opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\t this.currentSignBytesPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description Replace default bridge options\n\t\t * @type {import(\"@randlabs/communication-bridge\").sendMessageOptions}\n\t\t */\n\t\tthis.options = { waitForReply: true, timeout: this.timeout };\n\n\t\t/**\n\t\t * @access private\n\t\t * @description Disable ledger nano\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.disableLedgerNano = (options && options.disableLedgerNano) ? options.disableLedgerNano : false;\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to load accounts from storage.\n\t * @param {ConnectionSettings} settings Connect settings\n\t * @returns {Promise<string[]>} Returns allowed accounts by the user.\n\t */\n\tasync connect(settings = { shouldSelectOneAccount: false, openManager: false }) {\n\n\t\tif (this.currentConnectPopup) {\n\t\t\tif (this.currentConnectPopup.closed) {\n\t\t\t\tthis.currentConnectPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentConnectPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentConnectPopup = openPopup(this.url + \"/connect.html\");\n\n\t\t\tawait this.waitForWindowToLoad(this.currentConnectPopup);\n\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentConnectPopup,\n\t\t\t\t{ method: \"unlock\", params: Object.assign(settings, { disableLedgerNano: this.disableLedgerNano }) },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentConnectPopup);\n\t\t\tthis.currentConnectPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn res.data.accounts;\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentConnectPopup);\n\t\t\tthis.currentConnectPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign transaction.\n\t * @param {Transaction|Transaction[]|EncodedTransaction|EncodedTransaction[]} transaction Transaction object or a Transaction array.\n\t * @param {SignTransactionOptions} [signOptions] Sign transactions options object.\n\t * (The signer account must be the same for all transactions).\n\t * @returns {(SignedTx|SignedTx[])} Returns transaction blob or an Array of blobs, depends if the\n\t * transaction was an object or an array.\n\t */\n\tasync signTransaction(transaction, signOptions) {\n\t\tlet txn;\n\n\t\tif (this.currentSigntxPopup) {\n\t\t\tif (this.currentSigntxPopup.closed) {\n\t\t\t\tthis.currentSigntxPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentSigntxPopup);\n\t\t\t}\n\t\t}\n\n\t\tif (Array.isArray(transaction))\n\t\t\ttxn = Array.from(transaction).map(tx => prepareTxn(tx));\n\t\telse\n\t\t\ttxn = prepareTxn(transaction);\n\n\t\ttry {\n\t\t\tthis.currentSigntxPopup = openPopup(this.url + \"/signtx.html\");\n\n\t\t\tawait this.waitForWindowToLoad(this.currentSigntxPopup);\n\n\t\t\t// Send transaction info\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSigntxPopup, {\n\t\t\t\t\tmethod: \"transaction\",\n\t\t\t\t\tparams: { txn, settings: { disableLedgerNano: this.disableLedgerNano }, options: signOptions },\n\t\t\t\t},\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentSigntxPopup);\n\t\t\tthis.currentSigntxPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\tif (Array.isArray(res.data)) {\n\t\t\t\tconst result = [];\n\t\t\t\tfor (const t of res.data) {\n\t\t\t\t\tt.blob = new Uint8Array(Buffer.from(t.blob, \"hex\"));\n\t\t\t\t\tresult.push(t);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tres.data.blob = new Uint8Array(Buffer.from(res.data.blob, \"hex\"));\n\n\t\t\treturn res.data;\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentSigntxPopup);\n\t\t\tthis.currentSigntxPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign transaction.\n\t * @param {WalletTransaction[]} txnsToSign Transactions to sign.\n\t * @param {SignTxnsOpts} [opts] Sign transactions options object.\n\t * @returns {(SignedTxnStr|null)[]} Returns an array of base64 encoding of the SignedTxn,\n\t * or null where the transaction was not to be signed.\n\t */\n\tasync signTxns(txnsToSign, opts) {\n\t\tif (this.currentSigntxPopup) {\n\t\t\tif (this.currentSigntxPopup.closed) {\n\t\t\t\tthis.currentSigntxPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentSigntxPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tlet txns = txnsToSign;\n\t\t\tif (!Array.isArray(txnsToSign)) {\n\t\t\t\ttxns = [ txnsToSign ];\n\t\t\t}\n\n\t\t\tthis.currentSigntxPopup = openPopup(this.url + \"/signtx.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentSigntxPopup);\n\n\t\t\t// Send transaction info\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSigntxPopup, {\n\t\t\t\t\tmethod: \"signTxns\",\n\t\t\t\t\tparams: { txns, settings: { disableLedgerNano: this.disableLedgerNano }, opts },\n\t\t\t\t},\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentSigntxPopup);\n\t\t\tthis.currentSigntxPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new SignTxnsError(res.message, res.code, res.data);\n\n\t\t\treturn res.data.map(r => (r ? Buffer.from(r.blob, 'hex').toString('base64') : null));\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentSigntxPopup);\n\t\t\tthis.currentSigntxPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign a teal program.\n\t * @param {Uint8Array|Base64} logic LogicSig program\n\t * @param {Address} address Signer Address\n\t * @returns {Uint8Array} Returns logicsig blob\n\t */\n\tasync signLogicSig(logic, address) {\n\n\t\tif (this.currentSignLogicSigPopup) {\n\t\t\tif (this.currentSignLogicSigPopup.closed) {\n\t\t\t\tthis.currentSignLogicSigPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentSignLogicSigPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentSignLogicSigPopup = openPopup(this.url + \"/logicsigtx.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentSignLogicSigPopup);\n\n\t\t\t// Send program\n\t\t\tlet logicInBase64 = logic;\n\t\t\tif (logic.constructor === Uint8Array)\n\t\t\t\tlogicInBase64 = Buffer.from(logic).toString(\"base64\");\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSignLogicSigPopup,\n\t\t\t\t{ method: \"logicsig\", params: { logic: logicInBase64, address } },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentSignLogicSigPopup);\n\t\t\tthis.currentSignLogicSigPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn new Uint8Array(Buffer.from(res.data.signedTeal, \"base64\"));\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentSignLogicSigPopup);\n\t\t\tthis.currentSignLogicSigPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign data to verify in a teal program.\n\t * @param {Uint8Array|Base64} data Data to sign\n\t * @param {Address} contractAddress Address of the contract that will verify the data\n\t * @param {Address} address Signer Address\n\t * @returns {Uint8Array} Returns data signature\n\t */\n\tasync tealSign(data, contractAddress, address) {\n\n\t\tif (this.currentTealSignPopup) {\n\t\t\tif (this.currentTealSignPopup.closed) {\n\t\t\t\tthis.currentTealSignPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentTealSignPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentTealSignPopup = openPopup(this.url + \"/tealsign.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentTealSignPopup);\n\n\t\t\t// Send program\n\t\t\tlet dataInBase64 = data;\n\t\t\tif (data.constructor === Uint8Array)\n\t\t\t\tdataInBase64 = Buffer.from(data).toString(\"base64\");\n\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentTealSignPopup,\n\t\t\t\t{ method: \"tealsign\", params: { data: dataInBase64, contractAddress: contractAddress, address } },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentTealSignPopup);\n\t\t\tthis.currentTealSignPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn new Uint8Array(Buffer.from(res.data.signature, \"base64\"));\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentTealSignPopup);\n\t\t\tthis.currentTealSignPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign an arbitrary array of bytes.\n\t * @param {Uint8Array} bytes Bytes to sign\n\t * @param {Address} address Signer Address\n\t * @returns {Uint8Array} Returns bytes signature\n\t */\n\t async signBytes(bytes, address) {\n\t\tif (this.currentSignBytesPopup) {\n\t\t\tif (this.currentSignBytesPopup.closed) {\n\t\t\t\tthis.currentSignBytesPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentSignBytesPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentSignBytesPopup = openPopup(this.url + \"/signbytes.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentSignBytesPopup);\n\n\t\t\tlet messageInBase64 = Buffer.from(bytes).toString(\"base64\");\n\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSignBytesPopup,\n\t\t\t\t{ method: \"signbytes\", params: { data: messageInBase64, address } },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentSignBytesPopup);\n\t\t\tthis.currentSignBytesPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn new Uint8Array(Buffer.from(res.data.signature, \"base64\"));\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentSignBytesPopup);\n\t\t\tthis.currentSignBytesPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access private\n\t * @description Wait until the window opened loads.\n\t * @param {Window} targetWindow Window opened context.\n\t * @param {number} retries Times to retry before throw an error.\n\t * @returns {Promise<void>} Throw error if the window does not load.\n\t */\n\tasync waitForWindowToLoad(targetWindow, retries = 30) {\n\t\tfor (let i = 0; i < retries; i++) {\n\t\t\tawait sleep(300);\n\t\t\tif (!targetWindow) break;\n\t\t\ttry {\n\t\t\t\tconst res = await bridge.sendMessage(targetWindow, { method: \"status\" }, this.url);\n\t\t\t\tif (res.status == \"success\")\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\t// Ignore error\n\t\t\t}\n\t\t}\n\t\tthrow new Error(Errors.WINDOW_NOT_LOADED);\n\t}\n\n\t/**\n\t * @access private\n\t * @description Safely close an opened window\n\t * @param {Window} window Window object\n\t * @returns {void}\n\t */\n\tcloseWindow(window) {\n\t\tif (window && !window.closed && window.close) {\n\t\t\twindow.close();\n\t\t}\n\t}\n\n\t/**\n\t * @access private\n\t * @description Focus current popup\n\t * @param {Window} window Window object\n\t * @returns {void}\n\t * @throws {\"Windows is opened\"}\n\t */\n\tfocusWindow(window) {\n\t\tif (window && window.focus) {\n\t\t\twindow.focus();\n\t\t\tthrow new Error(Errors.WINDOW_IS_OPENED);\n\t\t}\n\t\telse {\n\t\t\tthrow new Error(Errors.INVALID_WINDOW);\n\t\t}\n\t}\n}\n\nmodule.exports = MyAlgoConnect;\n", "module.exports = require(\"./lib/main\");\n"],
  "mappings": "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",
  "names": ["require_errors", "__commonJSMin", "exports", "module", "init_shim", "ERRORS", "SignTxnsError", "message", "code", "data", "require_popup", "__commonJSMin", "exports", "module", "init_shim", "WINDOW_NOT_OPENED", "defaultOptions", "openPopup", "url", "options", "name", "width", "height", "top", "left", "params", "key", "param", "win", "err", "require_utils", "__commonJSMin", "exports", "module", "init_shim", "sleep", "msec", "resolve", "prepareTxn", "transaction", "txn", "i", "require_messenger", "__commonJSMin", "exports", "module", "init_shim", "Messenger", "channelName", "onMessageCallback", "that", "event", "json", "req", "channel", "replyId", "origin", "replyMessage", "message", "request", "targetWindow", "options", "targetOrigin", "resolve", "reject", "timeout", "require_communication_bridge", "__commonJSMin", "exports", "module", "init_shim", "require_Messaging", "__commonJSMin", "exports", "module", "init_shim", "Messenger", "WALLET_BRIDGE_CHANNEL_NAME", "Messaging", "listenerCallback", "that", "req", "source", "cb", "bridge", "window", "request", "origin", "options", "require_main", "__commonJSMin", "exports", "module", "init_shim", "openPopup", "sleep", "prepareTxn", "Errors", "SignTxnsError", "Messaging", "bridge", "MyAlgoConnect", "options", "settings", "res", "err", "transaction", "signOptions", "txn", "tx", "result", "t", "txnsToSign", "opts", "txns", "r", "logic", "address", "logicInBase64", "data", "contractAddress", "dataInBase64", "bytes", "messageInBase64", "targetWindow", "retries", "i", "window", "require_myalgo_connect", "__commonJSMin", "exports", "module", "init_shim"]
}
